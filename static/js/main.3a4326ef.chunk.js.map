{"version":3,"sources":["comp/AutoCompleteSearch.js","comp/Card.js","comp/HomePage.js","comp/CardFav.js","comp/FavoritesPage.js","comp/Header.js","App.js","serviceWorker.js","index.js"],"names":["AutoCompleteSearch","props","handleChange","selectedOption","setState","updateSelectCityName","label","getCurrentConditionsFromAPI","key","getForcastFromAPI","requestOptions","input","action","api_get_queary","apiKey","suggestions","getSuggestionsFromAPI","options","state","this","cityId","cityName","value","url","sugg","fetch","then","res","json","result","forEach","e","push","LocalizedName","Country","ID","Key","error","style","maxWidth","width","marginRight","onChange","onInputChange","placeholder","Component","Card","className","src","weatherIconId","alt","minWidth","temp","day","date","days_arr","HomePage","clickHandler","isInFav","remFromFav","FavoritesAddOrRemove","addToFav","currentweatherIcon","selectedCityConditions","Temperature","Metric","Value","WeatherIcon","onClick","WeatherText","selectedCityForecasts","map","i","Maximum","Date","slice","search","replace","getDay","Day","Icon","CardFav","name","id","icon","faTimesCircle","size","color","FavoritesPage","getFavCitys","data","city","text","Header","to","type","marginLeft","API_KEY","App","selectedCityName","selectedCityId","render","console","log","DailyForecasts","favoritesCitys","undefined","length","splice","selectedCityisFav","initFlag","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0UAoFeA,E,YA7Eb,WAAYC,GAAO,IAAD,8BAChB,+CAcJC,aAAe,SAAAC,GAEX,EAAKC,SACL,CAAED,mBAEF,EAAKF,MAAMI,qBAAqBF,EAAeG,OAC/C,EAAKL,MAAMM,4BAA4BJ,EAAeK,KACtD,EAAKP,MAAMQ,kBAAmBN,EAAeK,MAtB7B,EA0BpBE,eAAiB,SAACC,EAAD,GAAuB,IAAbC,EAAY,EAAZA,OACvB,GAAe,eAAXA,GAAqC,eAAVA,EAA/B,CAGA,IAAMC,EAAiB,+EAA+E,EAAKZ,MAAMa,OAAO,MAAMH,EACxHI,EAAa,EAAKC,sBAAsBH,GAC9C,EAAKT,SAAS,CAACa,QAAQF,MA9BvB,EAAKG,MAAQ,CACXf,eAAgB,KAChBc,QAAS,IAJK,E,iFAWhBE,KAAKjB,aAAa,CAACM,IAAIW,KAAKlB,MAAMmB,OAAOd,MAAMa,KAAKlB,MAAMoB,SAASC,MAAMH,KAAKlB,MAAMoB,a,4CAwBlEE,GAAM,IAAD,OAGjBC,EAAM,GACZC,MAAMF,GACLG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCA,EAAOC,SAAQ,SAAAC,GACbP,EAAKQ,KAAM,CAAEV,MAAOS,EAAEE,cAAgB,KAAOF,EAAEG,QAAQC,GAAI7B,MAAOyB,EAAEE,cAAgB,KAAOF,EAAEG,QAAQC,GAAI3B,IAAIuB,EAAEK,SAEjH,EAAKhC,SAAS,CAACa,QAAQO,OAMzB,SAACa,S,+BAOK,IACAlC,EAAmBgB,KAAKD,MAAxBf,eAER,OACE,yBAAKmC,MAAO,CAACC,SAAS,QAASC,MAAM,OAAQC,YAAY,SACvD,kBAAC,IAAD,CACEnB,MAAOnB,EACPuC,SAAUvB,KAAKjB,aACfyC,cAAgBxB,KAAKT,eACrBO,QAASE,KAAKD,MAAMD,QACpB2B,YAAa,gB,GAvEUC,a,MCoBlBC,MApBf,SAAc7C,GACV,OACI,yBAAK8C,UAAU,4BACX,yBAAKA,UAAU,2EACX,yBAAKA,UAAU,8EAEX,yBAAKA,UAAU,iEACX,yBAAKA,UAAU,iBAAiBC,IAAK,qBAAqB/C,EAAMgD,cAAc,OAAQC,IAAI,cAAcZ,MAAO,CAACE,MAAM,OAAQW,SAAS,WACvI,yBAAKJ,UAAU,iCAAiC9C,EAAMmD,KAAK,UAE/D,6BAAOnD,EAAMoD,IAAb,IAAmBpD,EAAMqD,UCXvCC,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OA6G7CC,E,YAzGX,aAAc,IAAD,8BACT,+CAcJC,aAAe,WACP,EAAKxD,MAAMyD,WACX,EAAKzD,MAAM0D,aACX,EAAKvD,SAAS,CAACwD,qBAAsB,gBAGrC,EAAK3D,MAAM4D,WACX,EAAKzD,SAAS,CAACwD,qBAAsB,aApBzC,EAAK1C,MAAM,GAFF,E,iFAMLC,KAAKlB,MAAMyD,UAEXvC,KAAKf,SAAS,CAACwD,qBAAsB,WAGrCzC,KAAKf,SAAS,CAACwD,qBAAsB,gB,+BAiBzC,IAAIR,EAAO,GACPU,EAAqB,GAYzB,MAV4D,qBAAlD3C,KAAKlB,MAAM8D,uBAAuBC,cACxCZ,EAAOjC,KAAKlB,MAAM8D,uBAAuBC,YAAYC,OAAOC,MAAO,QACnEJ,EACA,yBAAKf,UAAU,cACfC,IAAK,oBAAoB7B,KAAKlB,MAAM8D,uBAAuBI,YAAY,OACvEjB,IAAI,iBAMJ,yBAAKH,UAAU,mBACP,yBAAKA,UAAU,4BAGX,yBAAKA,UAAU,0FACX,kBAAC,EAAD,CACIjC,OAAQK,KAAKlB,MAAMa,OACnBO,SAAYF,KAAKlB,MAAMoB,SACvBD,OAAUD,KAAKlB,MAAMmB,OACrBf,qBAAsBc,KAAKlB,MAAMI,qBACjCI,kBAAoBU,KAAKlB,MAAMQ,kBAC/BF,4BAA6BY,KAAKlB,MAAMM,8BAE5C,4BAAQwC,UAAU,gCACdqB,QAASjD,KAAKsC,cACbtC,KAAKD,MAAM0C,uBAIpB,yBAAKb,UAAU,2DAEX,yBAAKA,UAAU,4EAA4ET,MAAO,CAAEE,MAAM,OAAQD,SAAS,UAGvH,yBAAKQ,UAAU,2BACX,6BACKe,GAEL,6BACI,4BAAKV,GACL,4BAAKjC,KAAKlB,MAAMoB,cAS5B,yBAAK0B,UAAU,sCACP,wBAAIA,UAAU,QAAQ5B,KAAKlB,MAAM8D,uBAAuBM,cAIpE,yBAAKtB,UAAU,2DACV5B,KAAKlB,MAAMqE,sBAAsBC,KAAI,SAAClB,EAAImB,GACvC,OACI,kBAAC,EAAD,CACAhE,IAAKgE,EACLpB,KAAMC,EAAIW,YAAYS,QAAQP,MAC9BZ,KAAMD,EAAIqB,KAAKC,MAAM,EAAEtB,EAAIqB,KAAKE,OAAO,MAAMC,QAAQ,IAAK,KAC1DxB,IAAOE,EAAU,IAAImB,KAAKrB,EAAIqB,KAAKC,MAAM,EAAEtB,EAAIqB,KAAKE,OAAO,MAAMC,QAAQ,IAAK,MAAMC,UACpF7B,cAAeI,EAAI0B,IAAIC,iB,GA/FpCnC,a,gBCyBRoC,MAzBf,SAAiBhF,GACb,OACI,yBAAK8C,UAAU,4BACX,yBAAKA,UAAU,2EACX,yBAAKA,UAAU,8EAEX,yBAAKA,UAAU,iEACX,yBAAMA,UAAU,iBAAiBC,IAAK,qBAAqB/C,EAAMgD,cAAc,OAAQC,IAAI,cAAcZ,MAAO,CAACE,MAAM,OAAQW,SAAS,WACxI,6BAAMlD,EAAMmD,KAAK,UAErB,6BACI,yBAAKL,UAAU,iCAAkC9C,EAAMoD,KACvD,yBAAKN,UAAU,iCAAkC9C,EAAMiF,OAG3D,yBAAKnC,UAAU,wCAAwCqB,QAAS,WAAKnE,EAAM0D,WAAW1D,EAAMkF,MAAO,kBAAC,IAAD,CAAiBC,KAAMC,IAAeC,KAAK,KAAKC,MAAM,eC0B9JC,E,YA3CX,WAAYvF,GAAO,IAAD,8BACd,+CAQJwF,YAAc,WACV,EAAKrF,SAAS,CACVsF,KAAK,EAAKzF,MAAMwF,iBAXN,EAelB9B,WAAa,SAACwB,GACV,EAAKlF,MAAM0D,WAAWwB,GACtB,EAAKM,eAfL,EAAKvE,MAAQ,CAACwE,KAAK,IAFL,E,iFAMdvE,KAAKsE,gB,+BAcA,IAAD,OACJ,OACI,6BACI,wBAAI1C,UAAU,QAAd,aACA,yBAAKA,UAAU,uEACV5B,KAAKD,MAAMwE,KAAKnB,KAAI,SAACoB,EAAKnB,GACvB,OACI,kBAAC,EAAD,CACAhE,IAAKgE,EACLW,GAAIQ,EAAKR,GACT/B,KAAMuC,EAAKvC,KACX8B,KAAMS,EAAKT,KACX7B,IAAOsC,EAAKC,KACZ3C,cAAe0C,EAAK1C,cACpBU,WAAY,EAAKA,sB,GApCjBd,a,QCkBbgD,MAhBf,SAAgB5F,GACZ,OACI,yBAAK8C,UAAU,kDACf,2CACE,6BACE,kBAAC,IAAD,CAAM+C,GAAG,KACP,4BAAQxD,MAAO,CAACG,YAAY,OAASsD,KAAK,SAAShD,UAAU,2BAA7D,SAEF,kBAAC,IAAD,CAAM+C,GAAG,kBACP,4BAAQxD,MAAO,CAAC0D,WAAW,OAAQD,KAAK,SAAShD,UAAU,0BAA3D,iB,QCFRkD,EAAU,mCA8JDC,E,YA1Jb,aAAc,IAAD,8BACX,+CAmBF7F,qBAAsB,SAAC6E,GACrB,EAAK9E,SAAS,CAAC+F,iBAAiBjB,KArBrB,EAwBb3E,4BAA8B,SAACa,GAE7BK,MADW,4DAA4DL,EAAO,WAAW6E,GAExFvE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKzB,SACD,CACE2D,uBAAyBlC,EAAO,GAChCuE,eAAehF,IAGrB,EAAKiF,YAMP,SAAChE,GACCiE,QAAQC,IAAI,wEA3CL,EAiDb9F,kBAAoB,SAACW,GAEnBK,MADY,+DAA+DL,EAAO,WAAW6E,EAAQ,gBAEpGvE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKzB,SACD,CACEkE,sBAAwBzC,EAAO2E,oBAOvC,SAACnE,GACCiE,QAAQC,IAAI,wEAjEL,EAuEb1C,SAAW,WACT,OAAI,EAAKH,QAAQ,EAAKxC,MAAMkF,iBAC1BE,QAAQC,IAAI,mBACL,IAET,EAAKrF,MAAMuF,eAAezE,KAAK,CAC7BmD,GAAG,EAAKjE,MAAMkF,eACdlB,KAAK,EAAKhE,MAAMiF,iBAChB/C,KAAK,EAAKlC,MAAM6C,uBAAuBC,YAAYC,OAAOC,MAC1D0B,KAAK,EAAK1E,MAAM6C,uBAAuBM,YACvCpB,cAAc,EAAK/B,MAAM6C,uBAAuBI,cAE3C,IAnFI,EAsFbT,QAAU,SAACtC,QAEMsF,IAAXtF,IACFA,EAAS,EAAKF,MAAMkF,gBAEtB,IAAK,IAAI5B,EAAI,EAAGA,EAAI,EAAKtD,MAAMuF,eAAeE,OAAQnC,IACpD,GAAG,EAAKtD,MAAMuF,eAAejC,GAAGW,KAAO/D,EACrC,OAAO,EAGX,OAAO,GAhGI,EAmGbuC,WAAY,SAACvC,QAGIsF,IAAXtF,IACFA,EAAS,EAAKF,MAAMkF,gBAGtB,IAAK,IAAI5B,EAAI,EAAGA,EAAI,EAAKtD,MAAMuF,eAAeE,OAAQnC,IACpD,GAAG,EAAKtD,MAAMuF,eAAejC,GAAGW,KAAO/D,EAErC,OADA,EAAKF,MAAMuF,eAAeG,OAAOpC,EAAG,GAC7B,EAGX,OAAO,GAhHI,EAmHbiB,YAAc,WACZ,OAAO,EAAKvE,MAAMuF,gBAlHlB,EAAKvF,MAAO,CACVuF,eAAe,GACfL,eAAe,SACfD,iBAAiB,eACjBpC,uBAAuB,GACvBO,sBAAsB,GACtBuC,kBAAkB,EAClBC,UAAU,GATD,E,mHA0HX,OACE,yBAAK/D,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOgE,KAAK,kBACR,kBAAC,EAAD,CACEtB,YAAatE,KAAKsE,YAClB9B,WAAYxC,KAAKwC,cAGrB,kBAAC,IAAD,CAAOoD,KAAK,KACV,kBAAC,EAAD,CACEjG,OAAQmF,EACR5F,qBAAwBc,KAAKd,qBAC7BE,4BAA8BY,KAAKZ,4BACnCE,kBAAqBU,KAAKV,kBAC1BoD,SAAU1C,KAAK0C,SACfH,QAASvC,KAAKuC,QACdC,WAAYxC,KAAKwC,WACjBtC,SAAYF,KAAKD,MAAMiF,iBACvB/E,OAAUD,KAAKD,MAAMkF,eACrBrC,uBAA0B5C,KAAKD,MAAM6C,uBACrCO,sBAAyBnD,KAAKD,MAAMoD,+B,GAlJlCzB,aCFEmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCNNC,IAAShB,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAwBiB,SAASC,eAAe,SDqHzE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,MAAK,SAAAiG,GACjCA,EAAaC,kB","file":"static/js/main.3a4326ef.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport React, { Component } from \"react\";\r\nimport Select from 'react-select';\r\n\r\n\r\nclass AutoCompleteSearch extends Component {\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      selectedOption: null,\r\n      options: []\r\n    };\r\n  }\r\n\r\n  \r\n  componentDidMount() {\r\n    //start with defualt values\r\n    this.handleChange({key:this.props.cityId,label:this.props.cityName,value:this.props.cityName})\r\n  }\r\n\r\n\r\nhandleChange = selectedOption => {\r\n\r\n    this.setState(\r\n    { selectedOption },\r\n    );\r\n    this.props.updateSelectCityName(selectedOption.label)\r\n    this.props.getCurrentConditionsFromAPI(selectedOption.key)\r\n    this.props.getForcastFromAPI( selectedOption.key)\r\n};\r\n\r\n  // Event fired when the input value is changed\r\nrequestOptions = (input, { action }) =>{\r\n    if (action === \"input-blur\" || action ==='menu-close'){\r\n      return\r\n    } \r\n    const api_get_queary = 'https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey='+this.props.apiKey+'&q='+input\r\n    const suggestions= this.getSuggestionsFromAPI(api_get_queary)\r\n    this.setState({options:suggestions}) \r\n}\r\n\r\ngetSuggestionsFromAPI(url) {\r\n    //let x = require('./demo.json');\r\n    //this section build the suggestion array from the json\r\n    const sugg =[]\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {      \r\n        result.forEach(e => {\r\n          sugg.push ({ value: e.LocalizedName + ', ' + e.Country.ID, label: e.LocalizedName + ', ' + e.Country.ID, key:e.Key })\r\n        });\r\n        this.setState({options:sugg})\r\n        return \r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        //console.log('ERROR: opsss something happen with the autocomplete request')\r\n        //console.log(error)\r\n      }\r\n    )\r\n  }\r\n  \r\n  render() {\r\n    const { selectedOption } = this.state;\r\n\r\n    return (\r\n      <div style={{maxWidth:'600px', width:'100%', marginRight:'10px'}}>\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.handleChange}\r\n          onInputChange ={this.requestOptions}\r\n          options={this.state.options}\r\n          placeholder =\"Search\"\r\n          \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteSearch;","/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className=\"card mx-0 mx-md-3 p-md-3\" >\r\n            <div className=\"card-body d-flex flex-sm-column align-content-center flex-wrap m-0 p-0 \">\r\n                <div className=\"d-flex flex-sm-column align-items-center justify-items-center small-screen\">\r\n                    \r\n                    <div className=\"d-flex flex-sm-column align-items-center justify-items-center\">                                                                  \r\n                        <img className=\"fixweathericon\" src={\"/AccuWeatherIcons/\"+props.weatherIconId+\".png\"} alt=\"weatherIcon\" style={{width:'10vw', minWidth:'100px'}} />\r\n                        <div className=\"d-flex justify-content-center\">{props.temp+'°c'}</div>\r\n                    </div>\r\n                    <div >{props.day} {props.date}</div>    \r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\nimport './HomePage.css';\r\nimport AutoCompleteSearch from'./AutoCompleteSearch.js'\r\nimport Card from'./Card.js'\r\nconst days_arr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n\r\nclass HomePage extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.isInFav()){\r\n            \r\n            this.setState({FavoritesAddOrRemove: \"Remove\"})\r\n        }\r\n        else {\r\n            this.setState({FavoritesAddOrRemove: \"Favorites\"})\r\n        }\r\n    }\r\n\r\n    clickHandler = ()=>{\r\n        if (this.props.isInFav()){\r\n            this.props.remFromFav()\r\n            this.setState({FavoritesAddOrRemove: \"Favorites\"})\r\n        }\r\n        else {\r\n            this.props.addToFav()\r\n            this.setState({FavoritesAddOrRemove: \"Remove\"})\r\n        }\r\n    }\r\n\r\n    render(){\r\n        \r\n        let temp = \"\"\r\n        let currentweatherIcon = \"\"\r\n \r\n        if(typeof this.props.selectedCityConditions.Temperature !== \"undefined\"){\r\n            temp = this.props.selectedCityConditions.Temperature.Metric.Value +'°c'\r\n            currentweatherIcon = \r\n            <img className=\"WeatherIcon\"\r\n            src={\"AccuWeatherIcons/\"+this.props.selectedCityConditions.WeatherIcon+\".png\"} \r\n            alt=\"weatherIcon\" \r\n            />\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"body d-flex-col\">         \r\n                    <div className=\"d-flex-col w-100 m-0 p-0\" >  \r\n                    \r\n                        {/* search bar */}                    \r\n                        <div className=\" d-flex justify-content-center mx-sm-5 mt-sm-5 mx-2 mt-2 animated slower bounceInLeft \"> \r\n                            <AutoCompleteSearch\r\n                                apiKey={this.props.apiKey}\r\n                                cityName = {this.props.cityName}\r\n                                cityId = {this.props.cityId}\r\n                                updateSelectCityName={this.props.updateSelectCityName}\r\n                                getForcastFromAPI= {this.props.getForcastFromAPI}\r\n                                getCurrentConditionsFromAPI={this.props.getCurrentConditionsFromAPI}\r\n                            />\r\n                            <button className=\"btn btn-outline-light btn-sm \"\r\n                                onClick={this.clickHandler} >\r\n                                {this.state.FavoritesAddOrRemove}\r\n                            </button>\r\n                        </div> \r\n\r\n                        <div className=\"d-flex justify-content-center px-2 px-sm-5 pt-2 pt-sm-5\"  >\r\n                            \r\n                            <div className=\"d-flex flex-sm-row flex-column justify-content-center align-items-center \" style={{ width:'100%', maxWidth:'700px'}}>\r\n                                \r\n                                {/* current city block */}\r\n                                <div className=\"currentCity d-flex-col \">\r\n                                    <div >\r\n                                        {currentweatherIcon}\r\n                                    </div>\r\n                                    <div>\r\n                                        <h5>{temp}</h5>\r\n                                        <h5>{this.props.cityName}</h5> \r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div> \r\n\r\n                        \r\n                            {/* current city Weather block */}\r\n                            <div className=\"d-flex justify-content-center mb-4\">\r\n                                    <h2 className=\"myh1\">{this.props.selectedCityConditions.WeatherText}</h2>\r\n                            </div>\r\n\r\n                        {/* 5 days forcast section*/}\r\n                        <div className=\"d-flex flex-sm-row flex-column justify-content-center  \">\r\n                            {this.props.selectedCityForecasts.map((day,i) =>{\r\n                                return(\r\n                                    <Card\r\n                                    key={i}\r\n                                    temp={day.Temperature.Maximum.Value}\r\n                                    date={day.Date.slice(5,day.Date.search('T')).replace(\"-\", \"/\")} \r\n                                    day = {days_arr[ new Date(day.Date.slice(0,day.Date.search('T')).replace(\"-\", \"/\")).getDay()]}\r\n                                    weatherIconId={day.Day.Icon} \r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div> \r\n\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomePage;","/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport './Card.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nfunction CardFav(props) {\r\n    return(\r\n        <div className=\"card mx-0 mx-md-3 p-md-3\" >\r\n            <div className=\"card-body d-flex flex-sm-column align-content-center flex-wrap m-0 p-0 \">\r\n                <div className=\"d-flex flex-sm-column align-items-center justify-items-center small-screen\">                                              \r\n                    \r\n                    <div className=\"d-flex flex-sm-column align-items-center justify-items-center\">\r\n                        <img  className=\"fixweathericon\" src={\"/AccuWeatherIcons/\"+props.weatherIconId+\".png\"} alt=\"weatherIcon\" style={{width:'12vw', minWidth:'100px'}} />\r\n                        <div>{props.temp+'°c'}</div>\r\n                    </div>\r\n                    <div >\r\n                        <div className=\"d-flex justify-content-center\" >{props.day}</div>\r\n                        <div className=\"d-flex justify-content-center\" >{props.name}</div>\r\n                        \r\n                    </div>\r\n                    <div className=\"d-flex justify-content-center mt-sm-3\" onClick={()=>{props.remFromFav(props.id)}} ><FontAwesomeIcon icon={faTimesCircle} size=\"2x\" color=\"white\"/></div>\r\n                                       \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default CardFav;","import React, { Component } from 'react'\r\nimport CardFav from './CardFav.js'\r\n\r\nclass FavoritesPage extends Component {\r\n\r\n    constructor(props){\r\n        super()\r\n        this.state = {data:[]}\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getFavCitys()\r\n    }\r\n\r\n    getFavCitys = ()=>{\r\n        this.setState({\r\n            data:this.props.getFavCitys()\r\n        })\r\n    }\r\n\r\n    remFromFav = (id)=>{\r\n        this.props.remFromFav(id)\r\n        this.getFavCitys()\r\n    }\r\n         \r\n    render(){   \r\n        return(\r\n            <div>\r\n                <h4 className=\"mt-5\">Favorites</h4>\r\n                <div className=\"d-flex flex-sm-row flex-column justify-content-center mt-2 mt-sm-5 \">\r\n                    {this.state.data.map((city,i) =>{\r\n                        return(\r\n                            <CardFav\r\n                            key={i}\r\n                            id={city.id}\r\n                            temp={city.temp}\r\n                            name={city.name} \r\n                            day = {city.text}\r\n                            weatherIconId={city.weatherIconId}\r\n                            remFromFav={this.remFromFav}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n}\r\nexport default FavoritesPage;","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction Header(props) {\r\n    return(\r\n        <div className=\"nav d-flex justify-content-between p-1 p-sm-5 \">\r\n        <h2>Herolo Task</h2>\r\n          <div >\r\n            <Link to=\"/\">\r\n              <button style={{marginRight:'1vw',}} type=\"button\" className=\"btn btn-outline-light  \" >Home</button>\r\n            </Link>\r\n            <Link to=\"/favoritesPage\">\r\n              <button style={{marginLeft:'1vw'}} type=\"button\" className=\"btn btn-outline-light \" >Favorites</button>\r\n            </Link>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport HomePage from './comp/HomePage.js'\r\nimport FavoritesPage from './comp/FavoritesPage.js'\r\nimport Header from './comp/Header.js'\r\n\r\nimport {\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst API_KEY = '5n75gEJJtytWih2erkcIxf9UHG63J9fQ'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      favoritesCitys:[],\r\n      selectedCityId:\"215854\",\r\n      selectedCityName:\"Tel Aviv, IL\",\r\n      selectedCityConditions:{},\r\n      selectedCityForecasts:[],\r\n      selectedCityisFav:0,\r\n      initFlag: true\r\n    }\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    //start with defualt values\r\n    //defualt values\r\n\r\n  }\r\n\r\n  updateSelectCityName =(name)=>{\r\n    this.setState({selectedCityName:name}) \r\n  }\r\n\r\n  getCurrentConditionsFromAPI = (cityId)=> {\r\n    const url =\"https://dataservice.accuweather.com/currentconditions/v1/\"+cityId+\"?apikey=\"+API_KEY\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState(\r\n            {\r\n              selectedCityConditions : result[0],\r\n              selectedCityId:cityId\r\n            }\r\n        )\r\n        this.render()\r\n        \r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log('ERROR: opsss something happen with the getForcastFromAPI request')\r\n      }\r\n    )\r\n   \r\n  }\r\n\r\n  getForcastFromAPI = (cityId)=> {\r\n    const url = \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\"+cityId+\"?apikey=\"+API_KEY+\"&metric=true\"\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        this.setState(\r\n            {\r\n              selectedCityForecasts : result.DailyForecasts\r\n            }\r\n        )\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log('ERROR: opsss something happen with the getForcastFromAPI request')\r\n      }\r\n    )\r\n    \r\n  }\r\n\r\n  addToFav = ()=> {\r\n    if (this.isInFav(this.state.selectedCityId)){\r\n      console.log(\"allready in fav\")\r\n      return 0\r\n    }\r\n    this.state.favoritesCitys.push({\r\n      id:this.state.selectedCityId,\r\n      name:this.state.selectedCityName ,\r\n      temp:this.state.selectedCityConditions.Temperature.Metric.Value,\r\n      text:this.state.selectedCityConditions.WeatherText,\r\n      weatherIconId:this.state.selectedCityConditions.WeatherIcon\r\n    })\r\n    return 1\r\n  }\r\n\r\n  isInFav = (cityId)=>{\r\n    // if cityId is undefined it use the current city\r\n    if (cityId === undefined){\r\n      cityId = this.state.selectedCityId\r\n    }\r\n    for (let i = 0; i < this.state.favoritesCitys.length; i++) {\r\n      if(this.state.favoritesCitys[i].id === cityId){\r\n        return 1\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  remFromFav =(cityId)=>{\r\n\r\n    // if cityId is undefined it use the current city\r\n    if (cityId === undefined){\r\n      cityId = this.state.selectedCityId\r\n    }\r\n\r\n    for (let i = 0; i < this.state.favoritesCitys.length; i++) {\r\n      if(this.state.favoritesCitys[i].id === cityId){\r\n        this.state.favoritesCitys.splice(i, 1)\r\n        return 1\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  getFavCitys = ()=>{\r\n    return this.state.favoritesCitys\r\n  }\r\n\r\n  \r\n  render(){\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n          <Header/>\r\n          <Switch>\r\n          <Route path=\"/favoritesPage\">\r\n              <FavoritesPage \r\n                getFavCitys={this.getFavCitys}\r\n                remFromFav={this.remFromFav} \r\n              />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <HomePage\r\n                apiKey={API_KEY}\r\n                updateSelectCityName = {this.updateSelectCityName}\r\n                getCurrentConditionsFromAPI= {this.getCurrentConditionsFromAPI}\r\n                getForcastFromAPI = {this.getForcastFromAPI}\r\n                addToFav={this.addToFav}\r\n                isInFav={this.isInFav}\r\n                remFromFav={this.remFromFav}\r\n                cityName = {this.state.selectedCityName}\r\n                cityId = {this.state.selectedCityId}\r\n                selectedCityConditions = {this.state.selectedCityConditions}\r\n                selectedCityForecasts = {this.state.selectedCityForecasts}\r\n              />\r\n            </Route>\r\n\r\n          </Switch>         \r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'react-mdl/extra/material.css';\r\nimport 'react-mdl/extra/material.js';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport '../node_modules/animate.css/animate.min.css';\r\n\r\n\r\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}