{"version":3,"sources":["comp/AutoCompleteSearch.js","comp/Card.js","comp/LandingPage.js","comp/CardFav.js","comp/FavoritesPage.js","App.js","serviceWorker.js","index.js"],"names":["AutoCompleteSearch","props","handleChange","selectedOption","setState","console","log","state","updateCityName","label","getCurrentConditionsFromAPI","key","getForcastFromAPI","requestOptions","input","action","api_get_queary","suggestions","getSuggestionsFromAPI","options","url","sugg","fetch","then","res","json","result","forEach","e","push","value","LocalizedName","Country","ID","Key","error","this","style","maxWidth","width","onChange","onInputChange","placeholder","Component","Card","className","src","weatherIconId","alt","temp","day","date","currentCityName","Forecasts","CurrentConditions","isFav","firstRunFlag","LandingPage","updateCurrCityName","name","cityId","DailyForecasts","addToFav","ans","Temperature","Metric","Value","text","WeatherText","WeatherIcon","remFromFav","addOrRemovBut","isInFav","onClick","icon","faHeart","size","color","addToFavBut","days_arr","currentweatherIcon","map","i","Maximum","Date","slice","search","replace","getDay","Day","Icon","FavoritesPage","data","getFavCitys","city","CardFav","App","obj","favoritesCitys","length","splice","to","marginRight","type","marginLeft","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.593dd59b.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport React, { Component } from \"react\";\r\nimport Select from 'react-select';\r\n\r\n\r\nclass AutoCompleteSearch extends Component {\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      selectedOption: null,\r\n      options: []\r\n    };\r\n  }  \r\n\r\n\r\nhandleChange = selectedOption => {\r\n    this.setState(\r\n    { selectedOption },\r\n    () => console.log(`Option selected:`, this.state.selectedOption)\r\n    );\r\n    this.props.updateCityName(selectedOption.label)\r\n    this.props.getCurrentConditionsFromAPI(selectedOption.key)\r\n    this.props.getForcastFromAPI( selectedOption.key)\r\n};\r\n\r\n  // Event fired when the input value is changed\r\nrequestOptions = (input, { action }) =>{\r\n    if (action == \"input-blur\" || action =='menu-close'){\r\n      return\r\n    } \r\n    const api_get_queary = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=3nLnVGu6bRKoXuPMecVRozYXub2GDzvF&q='+input\r\n    //const api_get_queary = 'https://jsonplaceholder.typicode.com/todos/1'\r\n    const suggestions= this.getSuggestionsFromAPI(api_get_queary)\r\n    this.setState({options:suggestions}) \r\n}\r\n\r\ngetSuggestionsFromAPI(url) {\r\n    //let x = require('./demo.json');\r\n    //this section build the suggestion array from the json\r\n    const sugg =[]\r\n\r\n    console.log(\"new call\")\r\n    fetch(url)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {      \r\n        result.forEach(e => {\r\n          sugg.push ({ value: e.LocalizedName + ', ' + e.Country.ID, label: e.LocalizedName + ', ' + e.Country.ID, key:e.Key })\r\n        });\r\n        this.setState({options:sugg})\r\n        return \r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        console.log('ERROR: opsss something happen with the autocomplete request')\r\n        console.log(error)\r\n      }\r\n    )\r\n  }\r\n  \r\n  render() {\r\n    const { selectedOption } = this.state;\r\n\r\n    return (\r\n      <div style={{maxWidth:'700px', width:'100%'}}>\r\n        <Select\r\n          value={selectedOption}\r\n          onChange={this.handleChange}\r\n          onInputChange ={this.requestOptions}\r\n          options={this.state.options}\r\n          placeholder =\"Search\"\r\n          \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AutoCompleteSearch;","/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className=\"card mx-0 mx-md-3\" >\r\n            <div className=\"card-body d-flex flex-sm-column justify-content-between align-content-center flex-wrap m-0 p-0 \">\r\n                <div className=\"d-flex-col \">                                              \r\n                    <div className=\"d-flex justify-content-center m-0 p-0\">\r\n                        <img src={\"/AccuWeatherIcons/\"+props.weatherIconId+\".png\"} alt=\"weatherIcon\" />\r\n                    </div>\r\n                    \r\n                    <p className=\"d-flex justify-content-center m-0 p-0\">{props.temp+'°c'}</p>\r\n\r\n                </div>\r\n                <div >\r\n                    <p className=\"d-flex justify-content-center m-0 p-0\" >{props.day}</p>\r\n                    <p className=\"d-flex justify-content-center m-0 p-0\" >{props.date}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\nimport './LandingPage.css';\r\nimport AutoCompleteSearch from'./AutoCompleteSearch.js'\r\nimport Card from'./Card.js'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n//static state\r\nlet state = {currentCityName:\"\",Forecasts:[], CurrentConditions:{}, isFav:0 };\r\nlet firstRunFlag =true\r\n\r\nclass LandingPage extends Component {\r\n    constructor(){\r\n        super()\r\n        // Retrieve the last state\r\n        this.state = state;   \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Remember state for the next mount\r\n        state = this.state;\r\n      }\r\n\r\n    updateCurrCityName =(name)=>{\r\n        this.setState({currentCityName:name})\r\n        \r\n    }\r\n\r\n    getForcastFromAPI = (cityId)=> {\r\n        \r\n        const url = \"http://dataservice.accuweather.com/forecasts/v1/daily/5day/\"+cityId+\"?apikey=3nLnVGu6bRKoXuPMecVRozYXub2GDzvF&metric=true\"\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState(\r\n                {\r\n                    Forecasts : result.DailyForecasts\r\n                }\r\n            )\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            console.log('ERROR: opsss something happen with the getForcastFromAPI request')\r\n          }\r\n        )\r\n        \r\n      }\r\n\r\n    getCurrentConditionsFromAPI = (cityId)=> {\r\n        const url =\"http://dataservice.accuweather.com/currentconditions/v1/\"+cityId+\"?apikey=3nLnVGu6bRKoXuPMecVRozYXub2GDzvF\"\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState(\r\n                {\r\n                    CurrentConditions : result[0]\r\n                }\r\n            )\r\n          },\r\n          // Note: it's important to handle errors here\r\n          // instead of a catch() block so that we don't swallow\r\n          // exceptions from actual bugs in components.\r\n          (error) => {\r\n            console.log('ERROR: opsss something happen with the getForcastFromAPI request')\r\n          }\r\n        )\r\n       \r\n    }\r\n\r\n    enableAddToFavBut (){\r\n        this.addToFavBut=\r\n        <button className=\"btn btn-primary btn-sm \"\r\n        onClick={this.addToFav} >\r\n            Add to Favorites!\r\n            <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faHeart} size=\"2x\" color=\"red\"/>\r\n            </span> \r\n        </button>\r\n    }\r\n    \r\n    addToFav = ()=>{\r\n        const ans =this.props.addToFav({\r\n            name:this.state.currentCityName ,\r\n            temp:this.state.CurrentConditions.Temperature.Metric.Value,\r\n            text:this.state.CurrentConditions.WeatherText,\r\n            weatherIconId:this.state.CurrentConditions.WeatherIcon})\r\n        // ans = 0 => already in the fav\r\n        this.setState ({isFav:ans})\r\n        }\r\n\r\n    remFromFav = ()=>{\r\n        const ans =this.props.remFromFav({\r\n            name:this.state.currentCityName })\r\n        if(ans){\r\n            this.setState({isFav:0})\r\n        }\r\n    }\r\n        \r\n    addOrRemovBut = ()=>{\r\n        //ans=1 not in the fav\r\n        if(this.props.isInFav({name:this.state.currentCityName})==0){\r\n            return(\r\n                <button className=\"btn btn-primary btn-sm  \"\r\n                onClick={this.addToFav} >\r\n                Add to Favorites\r\n                <span className=\"icon\">\r\n                <FontAwesomeIcon icon={faHeart} size=\"2x\" color=\"red\"/>\r\n                </span> \r\n                </button>\r\n            )\r\n        }\r\n        return (\r\n            <button className=\"btn btn-primary btn-sm  \"\r\n            onClick={this.remFromFav} >\r\n            Remove\r\n            <span className=\"icon\">\r\n            <FontAwesomeIcon icon={faHeart} size=\"2x\" color=\"red\"/>\r\n            </span> \r\n            </button>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        if(firstRunFlag){\r\n            //defualt values\r\n            firstRunFlag=false;\r\n            this.updateCurrCityName('Tel Aviv')\r\n            this.getForcastFromAPI('215854')\r\n            this.getCurrentConditionsFromAPI('215854')\r\n        }\r\n\r\n        const days_arr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        let temp = \"\"\r\n        let currentweatherIcon = \"\"\r\n        if(typeof this.state.CurrentConditions.Temperature !== \"undefined\"){\r\n            temp = this.state.CurrentConditions.Temperature.Metric.Value +'°c'\r\n            currentweatherIcon = <img className=\"WeatherIcon\" src={\"/AccuWeatherIcons/\"+this.state.CurrentConditions.WeatherIcon+\".png\"} alt=\"weatherIcon\" />\r\n        }\r\n\r\n\r\n        return(\r\n            <div className=\"d-flex-col\">         \r\n                    <div className=\"d-flex-col w-100 \" >  \r\n\r\n                        {/* search bar */}                    \r\n                        <div className=\" d-flex justify-content-center mx-sm-5 mt-sm-5 mx-2 mt-2 \"> \r\n                            <AutoCompleteSearch updateCityName={this.updateCurrCityName} getForcastFromAPI= {this.getForcastFromAPI} getCurrentConditionsFromAPI={this.getCurrentConditionsFromAPI} />\r\n                        </div> \r\n\r\n                        {/*second row */}\r\n                        <div className=\"d-flex justify-content-center px-2 px-sm-5 pt-2 pt-sm-5\"  >\r\n                            \r\n                            <div className=\"d-flex flex-sm-row flex-column justify-content-between align-items-center\" style={{ width:'100%', maxWidth:'700px'}}>\r\n                                \r\n                                {/* current city block */}\r\n                                <div className=\"currentCity d-flex\">\r\n                                    <div>\r\n                                        {currentweatherIcon}\r\n                                    </div>\r\n                                    <div>\r\n                                        <h5>{this.state.currentCityName}</h5> \r\n                                        <h5>{temp}</h5>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n\r\n                            {/* add to favorites block */}   \r\n                                <div className=\"d-flex align-self-sm-start align-self-end \">\r\n                                    {this.addOrRemovBut()}\r\n                                </div>\r\n                            </div>\r\n                        </div> \r\n\r\n                        \r\n                            {/* current city Weather block */}\r\n                            <div className=\"d-flex justify-content-center pb-2\">\r\n                                    <h1>{this.state.CurrentConditions.WeatherText}</h1>\r\n                                </div>\r\n\r\n                        {/* 5 days forcast section*/}\r\n                        <div className=\"d-flex flex-sm-row flex-column justify-content-center mb-2 \">\r\n                            {this.state.Forecasts.map((day,i) =>{\r\n                                return(\r\n                                    <Card\r\n                                    key={i}\r\n                                    temp={day.Temperature.Maximum.Value}\r\n                                    date={day.Date.slice(5,day.Date.search('T')).replace(\"-\", \"/\")} \r\n                                    day = {days_arr[ new Date(day.Date.slice(0,day.Date.search('T')).replace(\"-\", \"/\")).getDay()]}\r\n                                    weatherIconId={day.Day.Icon} \r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div> \r\n\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LandingPage;","/* eslint-disable react/prop-types */\r\nimport React from 'react'\r\nimport './Card.css';\r\n\r\n\r\nfunction Card(props) {\r\n    return(\r\n        <div className=\"card mx-0 mx-md-3\" >\r\n            <div className=\"card-body d-flex flex-sm-column justify-content-between align-content-center flex-wrap  \">\r\n                <div className=\"d-flex-col\">                                              \r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <img src={\"/AccuWeatherIcons/\"+props.weatherIconId+\".png\"} alt=\"weatherIcon\" />\r\n                    </div>\r\n                    \r\n                    <h4 className=\"d-flex justify-content-center\">{props.temp+'°c'}</h4>\r\n\r\n                </div>\r\n                <div>\r\n                    <h4 className=\"d-flex justify-content-center\" >{props.day}</h4>\r\n                    <h4 className=\"d-flex justify-content-center\" >{props.name}</h4>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\nimport CardFav from './CardFav.js'\r\n\r\nclass FavoritesPage extends Component {\r\n\r\n    constructor(props){\r\n        super()\r\n        this.state = {data:[]}\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            data:this.props.getFavCitys()\r\n        })\r\n    }\r\n         \r\n    render(){   \r\n        return(\r\n            <div>\r\n                <div className=\"d-flex flex-sm-row flex-column justify-content-center mt-2 mt-sm-5 \">\r\n                    {this.state.data.map((city,i) =>{\r\n                        return(\r\n                            <CardFav\r\n                            key={i}\r\n                            temp={city.temp}\r\n                            name={city.name} \r\n                            day = {city.text}\r\n                            weatherIconId={city.weatherIconId} \r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default FavoritesPage;","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport LandingPage from './comp/LandingPage.js'\r\nimport FavoritesPage from './comp/FavoritesPage.js'\r\n\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state ={favoritesCitys:[]}\r\n       \r\n\r\n  }\r\n\r\n  addToFav = (obj)=> {\r\n    // this section prevent form adding the same city obj into the array\r\n    if (this.isInFav(obj)){\r\n      return 0\r\n    }\r\n    this.state.favoritesCitys.push(obj)\r\n    return 1\r\n    }\r\n\r\n  isInFav = (obj)=>{\r\n    let i;\r\n    for (i = 0; i < this.state.favoritesCitys.length; i++) {\r\n      if(this.state.favoritesCitys[i].name === obj.name){\r\n        return 1\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  remFromFav =(obj)=>{\r\n    let i;\r\n    for (i = 0; i < this.state.favoritesCitys.length; i++) {\r\n      if(this.state.favoritesCitys[i].name === obj.name){\r\n        this.state.favoritesCitys.splice(i, 1)\r\n        return 1\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  getFavCitys = ()=>{\r\n    return this.state.favoritesCitys\r\n  }\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"wrapper\">\r\n          <div className=\"nav d-flex justify-content-between p-3 p-sm-5\">\r\n            <h2>Herolo Task</h2>\r\n              <div >\r\n                <Link to=\"/\">\r\n                  <button style={{marginRight:'1vw',}} type=\"button\" className=\"btn btn-primary\" >Home</button>\r\n                </Link>\r\n                <Link to=\"/favoritesPage\">\r\n                  <button style={{marginLeft:'1vw'}} type=\"button\" className=\"btn btn-primary\" >favoritesPage</button>\r\n                </Link>\r\n              </div>\r\n          </div>\r\n\r\n          <Switch>\r\n            <Route path=\"/favoritesPage\">\r\n              <FavoritesPage getFavCitys={this.getFavCitys} />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <LandingPage addToFav={this.addToFav} isInFav={this.isInFav} remFromFav={this.remFromFav} />\r\n            </Route>\r\n          </Switch>\r\n          \r\n          \r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}